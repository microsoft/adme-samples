components:
  schemas:
    Acl:
      properties:
        owners:
          items:
            type: string
          type: array
        viewers:
          items:
            type: string
          type: array
      type: object
    Ancestry:
      description: A named list of entities in the data lake as a dictionary item.
      properties:
        parents:
          description: An array of one or more entity references in the data lake.
          items:
            type: string
          type: array
      type: object
    AppError:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        reason:
          type: string
      type: object
    ConnectedOuterService:
      properties:
        name:
          type: string
        version:
          type: string
      type: object
    DatasetProperties:
      description: Dataset Properties
      properties:
        FileSourceInfo:
          $ref: '#/components/schemas/FileSourceInfo'
      required:
      - FileSourceInfo
      type: object
    DownloadUrlResponse:
      description: Download URL response
      properties:
        SignedUrl:
          description: Signed URL
          type: string
      type: object
    FileData:
      description: The file data container containing all necessary details of the
        file record
      properties:
        Checksum:
          description: MD5 checksum of file bytes - a 32 byte hexadecimal number
          pattern: ^[0-9a-fA-F]32}$
          type: string
        DatasetProperties:
          $ref: '#/components/schemas/DatasetProperties'
        Description:
          description: An optional, textual description of the dataset.
          type: string
        EncodingFormatTypeID:
          description: Encoding Format Type ID
          pattern: ^srn:<namespace>:reference-data\\/EncodingFormatType:[^:]+:[0-9]*$
          type: string
        Endian:
          description: Endianness of binary value. Enumeration- \BIG\ \LITTLE\.  If
            absent applications will need to interpret from context indicators.
          enum:
          - BIG
          - LITTLE
          type: string
        ExistenceKind:
          description: Existence Kind
          type: string
        ExtensionProperties:
          additionalProperties:
            description: File DMS Extension Properties
            type: object
          description: File DMS Extension Properties
          type: object
        Name:
          description: An optional name of the dataset, e.g. a user friendly file
            or file collection name.
          type: string
        ResourceCurationStatus:
          description: Resource Curation Status
          type: string
        ResourceHomeRegionID:
          description: Resource Home Region ID
          type: string
        ResourceHostRegionIDs:
          description: Resource Host Region IDs
          items:
            type: string
          type: array
        ResourceLifecycleStatus:
          description: Resource Lifecycle Status
          type: string
        ResourceSecurityClassification:
          description: Resource Security Classification
          type: string
        SchemaFormatTypeID:
          description: Schema Format Type ID
          pattern: ^srn:<namespace>:reference-data\\/SchemaFormatType:[^:]+:[0-9]*$
          type: string
        Source:
          description: Source
          type: string
        TotalSize:
          description: Total size of the dataset in bytes; for files it is the same
            as declared in FileSourceInfo.FileSize or the sum of all individual files.
            Implemented as string. The value must be convertible to a long integer
            (sizes can become very large).
          pattern: ^[0-9]+$
          type: string
      required:
      - DatasetProperties
      type: object
    FileMetadata:
      description: File metadata record.
      properties:
        acl:
          $ref: '#/components/schemas/Acl'
        ancestry:
          $ref: '#/components/schemas/Ancestry'
        data:
          $ref: '#/components/schemas/FileData'
        id:
          description: Unique identifier generated by the system for the file metadata
            record.
          type: string
        kind:
          description: "Kind of data being ingested. Must follow the naming\n  convention:data-Partition-Id}:dataset-name}:record-type}:version}."
          example: osdu:wks:dataset--File.Generic:1.0.0
          type: string
        legal:
          $ref: '#/components/schemas/Legal'
        meta:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        tags:
          additionalProperties:
            type: string
          type: object
      required:
      - acl
      - data
      - kind
      - legal
      type: object
    FileMetadataResponse:
      description: File metadata Response
      properties:
        id:
          description: Unique identifier generated by the system for the file metadata
            record.
          type: string
      type: object
    FileSourceInfo:
      description: File Source Info
      properties:
        Checksum:
          description: MD5 checksum of file bytes - a 32 byte hexadecimal number
          pattern: ^[0-9a-fA-F]32}$
          type: string
        ChecksumAlgorithm:
          description: The name of the checksum algorithm e.g. MD5, SHA-256.
          type: string
        EncodingFormatTypeID:
          description: Encoding Format Type ID
          pattern: ^srn:<namespace>:reference-data\\/EncodingFormatType:[^:]+:[0-9]*$
          type: string
        FileSize:
          description: Length of file in bytes. Implemented as string. The value must
            be convertible to a long integer (sizes can become very large).
          type: string
        FileSource:
          description: Relative file path for the data in the file
          type: string
        Name:
          description: user-friendly file name.
          type: string
        PreloadFileCreateDate:
          description: Optional create date and time of the file prior to uploading
            to the platform.
          type: string
        PreloadFileCreateUser:
          description: Optional user name or reference, who created the file prior
            to up-loading to the platform.
          type: string
        PreloadFileModifyDate:
          description: Optional last modified date and time of the file prior to up-loading
            to the platform.
          type: string
        PreloadFileModifyUser:
          description: Optional user name or reference, who last modified the file
            prior to up-loading to the platform.
          type: string
        PreloadFilePath:
          description: File system path to the data file as it existed before loading
            to the data platform
          type: string
        preloadFilePath:
          type: string
      required:
      - FileSource
      type: object
    Legal:
      properties:
        legaltags:
          items:
            type: string
          type: array
          uniqueItems: true
        otherRelevantDataCountries:
          items:
            type: string
          type: array
          uniqueItems: true
        status:
          enum:
          - compliant
          - incompliant
          type: string
      required:
      - otherRelevantDataCountries
      type: object
    LocationResponse:
      properties:
        FileID:
          type: string
        Location:
          additionalProperties:
            type: string
          type: object
      type: object
    RecordVersion:
      description: Metadata record
      properties:
        acl:
          $ref: '#/components/schemas/Acl'
        ancestry:
          $ref: '#/components/schemas/Ancestry'
        data:
          $ref: '#/components/schemas/FileData'
        id:
          description: Unique identifier generated by the system for the file metadata
            record.
          type: string
        kind:
          description: "Kind of data being ingested. Must follow the naming\n  convention:data-Partition-Id}:dataset-name}:record-type}:version}."
          example: osdu:wks:dataset--File.Generic:1.0.0
          type: string
        legal:
          $ref: '#/components/schemas/Legal'
        meta:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        tags:
          additionalProperties:
            type: string
          type: object
        version:
          description: The version number of this OSDU resource; set by the framework.
          example: 1831253916104085
          format: int64
          type: integer
      required:
      - acl
      - data
      - kind
      - legal
      type: object
    VersionInfo:
      properties:
        artifactId:
          type: string
        branch:
          type: string
        buildTime:
          type: string
        commitId:
          type: string
        commitMessage:
          type: string
        connectedOuterServices:
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
          type: array
        groupId:
          type: string
        version:
          type: string
      type: object
  securitySchemes:
    Authorization:
      bearerFormat: Authorization
      scheme: bearer
      type: http
info:
  contact:
    email: dps@OSDU.org
    name: OSDU Data Platform Team
  description: This service allows users to manage files on the  Data Platform. File
    Management includes uploads, downloads and creation of metadata record for the
    file.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: File Service
  version: 2.0.0
openapi: 3.0.1
paths:
  /v2/files/metadata:
    post:
      description: 'This API creates a metadata record for a file that is already
        uploaded. The Metadata is linked to the file via `FileSource` provided in
        the request body. <p> If `FileSource` attribute is missing in the request
        body or there is no file present, then the request fails with an error. </p><p>
        When metadata is successfully updated in the system, it returns the `Id` of
        the file metadata record. </p><p> **Required roles**: `service.file.editors`.
        Users added to groups `users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops`
        would be added to group `service.file.editors` by default.</p>'
      operationId: postFilesMetadata
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileMetadata'
        required: true
      responses:
        '201':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileMetadataResponse'
          description: Metadata created
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Record Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Gateway
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Creates a metadata for a file
      tags:
      - file-metadata-api
  /v2/files/uploadURL:
    get:
      description: 'Gets a temporary signed URL to upload a file (Service does not
        upload the file by itself, User needs to use this URL to upload the file).
        The generated URL is time bound and by default expires by `1 Hour` and it
        is `7 Days` maximum. <p> User will receive a FileSource in the response.This
        is the relative path where the uploaded file will persist. Once the file is
        uploaded, FileSource can then be used to post metadata of the file.</p> <p>
        **Required roles**: `service.file.editors`. Users added to groups `users.datalake.editors`,
        `users.datalake.admins`, `users.datalake.ops` would be added to group `service.file.editors`
        by default.</p>'
      operationId: getLocationFile
      parameters:
      - description: The Time for which Signed URL to be valid. Accepted Regex patterns
          are "^[0-9]+M$", "^[0-9]+H$", "^[0-9]+D$" denoting Integer values in Minutes,
          Hours, Days respectively. In absence of this parameter the URL would be
          valid for 1 Hour.
        example: 5M
        in: query
        name: expiryTime
        required: false
        schema:
          type: string
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LocationResponse'
          description: File location
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Record Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Gateway
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Get a location in Landing Zone to upload a file.
      tags:
      - file-location-api
  /v2/files/{id}/downloadURL:
    get:
      description: 'Gets a URL for downloading the file associated with the unique
        `id`.By default, the download URL is valid for `1 Hour` and it is `7 Days`
        maximum.<p> **Required roles**: `service.file.viewers`. Users added to groups
        `users.datalake.viewers`,`users.datalake.editors`, `users.datalake.admins`,
        `users.datalake.ops` would be added to group `service.file.viewers` by default.</p>'
      operationId: downloadURL
      parameters:
      - description: File Metadata record Id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The Time for which Signed URL to be valid. Accepted Regex patterns
          are "^[0-9]+M$", "^[0-9]+H$", "^[0-9]+D$" denoting Integer values in Minutes,
          Hours, Days respectively. In absence of this parameter the URL would be
          valid for 1 Hour.
        example: 5M
        in: query
        name: expiryTime
        required: false
        schema:
          type: string
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DownloadUrlResponse'
          description: A successful response
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Record Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Gateway
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Gets a URL to download the file
      tags:
      - file-delivery-api
  /v2/files/{id}/metadata:
    delete:
      description: 'Deletes the File metadata record identified by the given id and
        file associated with that metadata record. <p> **Required roles**: `users.datalake.editors`  or
        `users.datalake.admins`.</p>'
      operationId: deleteFileMetadataById
      parameters:
      - description: File metadata record Id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Record deleted successfully.
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Request
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Record Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Gateway
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Deletes metadata record & file associated with that record for the
        given id
      tags:
      - file-metadata-api
    get:
      description: 'Gets the latest version of File metadata record identified by
        the given id. <p> **Required roles**: `service.file.editors`. Users added
        to groups `users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops`
        would be added to group `service.file.editors` by default.</p>'
      operationId: getFileMetadataById
      parameters:
      - description: File metadata record Id.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RecordVersion'
          description: A successful response
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Request
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Record Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Bad Gateway
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Gets metadata record for the given id
      tags:
      - file-metadata-api
  /v2/info:
    get:
      description: For deployment available public `/info` endpoint, which provides
        build and git related information.
      operationId: info
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: Version info.
      summary: Version info
      tags:
      - info
  /v2/liveness_check:
    get:
      description: For deployment available public `/liveness_check` endpoint.
      operationId: livenessCheck
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Liveness Check endpoint
      tags:
      - health-check-api
  /v2/readiness_check:
    get:
      description: For deployment available public `/readiness_check` endpoint.
      operationId: readinessCheck
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Readiness Check endpoint
      tags:
      - health-check-api
security:
- Authorization: []
servers:
- url: /api/file/
tags:
- description: File Metadata API
  name: file-metadata-api
- description: File Location API
  name: file-location-api
- description: Health Check API
  name: health-check-api
- description: File Delivery API
  name: file-delivery-api
- description: Version info endpoint
  name: info
