components:
  schemas:
    AggregationResponse:
      properties:
        count:
          format: int64
          type: integer
        key:
          type: string
      type: object
    AppError:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        reason:
          type: string
      type: object
    ByBoundingBox:
      properties:
        bottomRight:
          $ref: '#/components/schemas/Point'
        topLeft:
          $ref: '#/components/schemas/Point'
      required:
      - bottomRight
      - topLeft
      type: object
    ByDistance:
      properties:
        distance:
          format: double
          maximum: 9223372036854775807
          type: number
        point:
          $ref: '#/components/schemas/Point'
      required:
      - point
      type: object
    ByGeoPolygon:
      properties:
        points:
          items:
            $ref: '#/components/schemas/Point'
          type: array
      required:
      - points
      type: object
    ByIntersection:
      properties:
        polygons:
          items:
            $ref: '#/components/schemas/Polygon'
          type: array
      required:
      - polygons
      type: object
    ByWithinPolygon:
      properties:
        points:
          items:
            $ref: '#/components/schemas/Point'
          type: array
      required:
      - points
      type: object
    ConnectedOuterService:
      properties:
        name:
          type: string
        version:
          type: string
      type: object
    CursorQueryRequest:
      properties:
        cursor:
          type: string
        kind:
          type: object
        limit:
          format: int32
          minimum: 0
          type: integer
        query:
          type: string
        queryAsOwner:
          type: boolean
        returnedFields:
          items:
            type: string
          type: array
        sort:
          $ref: '#/components/schemas/SortQuery'
        spatialFilter:
          $ref: '#/components/schemas/SpatialFilter'
        trackTotalCount:
          type: boolean
      required:
      - kind
      type: object
    CursorQueryResponse:
      properties:
        cursor:
          type: string
        results:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    Point:
      properties:
        latitude:
          format: double
          maximum: 90
          minimum: -90
          type: number
        longitude:
          format: double
          type: number
      type: object
    Polygon:
      properties:
        points:
          items:
            $ref: '#/components/schemas/Point'
          type: array
      type: object
    QueryRequest:
      properties:
        aggregateBy:
          type: string
        kind:
          type: object
        limit:
          format: int32
          minimum: 0
          type: integer
        offset:
          format: int32
          minimum: 0
          type: integer
        query:
          type: string
        queryAsOwner:
          type: boolean
        returnedFields:
          items:
            type: string
          type: array
        sort:
          $ref: '#/components/schemas/SortQuery'
        spatialFilter:
          $ref: '#/components/schemas/SpatialFilter'
        trackTotalCount:
          type: boolean
      required:
      - kind
      type: object
    QueryResponse:
      properties:
        aggregations:
          items:
            $ref: '#/components/schemas/AggregationResponse'
          type: array
        results:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    SortQuery:
      properties:
        field:
          items:
            type: string
          type: array
        order:
          items:
            enum:
            - ASC
            - DESC
            type: string
          type: array
      type: object
    SpatialFilter:
      properties:
        byBoundingBox:
          $ref: '#/components/schemas/ByBoundingBox'
        byDistance:
          $ref: '#/components/schemas/ByDistance'
        byGeoPolygon:
          $ref: '#/components/schemas/ByGeoPolygon'
        byIntersection:
          $ref: '#/components/schemas/ByIntersection'
        byWithinPolygon:
          $ref: '#/components/schemas/ByWithinPolygon'
        field:
          type: string
      required:
      - field
      type: object
    VersionInfo:
      properties:
        artifactId:
          type: string
        branch:
          type: string
        buildTime:
          type: string
        commitId:
          type: string
        commitMessage:
          type: string
        connectedOuterServices:
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
          type: array
        groupId:
          type: string
        version:
          type: string
      type: object
  securitySchemes:
    Authorization:
      bearerFormat: Authorization
      scheme: bearer
      type: http
info:
  contact:
    email: dps@OSDU.org
    name: OSDU Data Platform Team
  description: Search service that provides a set of APIs to search records against
    Elasticsearch
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Search Service
  version: '2.0'
openapi: 3.0.1
paths:
  /health/liveness_check:
    get:
      description: For deployment available public `/liveness_check` endpoint.
      operationId: livenessCheck
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Liveness Check endpoint
      tags:
      - health-check-api
  /health/readiness_check:
    get:
      description: For deployment available public `/readiness_check` endpoint.
      operationId: readinessCheck
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
      summary: Readiness Check endpoint
      tags:
      - health-check-api
  /info:
    get:
      description: For deployment available public `/info` endpoint, which provides
        build and git related information.
      operationId: info
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: Version info.
      summary: Version info
      tags:
      - info
  /query:
    post:
      description: "The API supports full text search on string fields, range queries\
        \ on date, numeric or string fields, along with geo-spatial search. \n Required\
        \ roles: `users.datalake.viewers` or  `users.datalake.editors` or `users.datalake.admins`\
        \ or `users.datalake.ops`. In addition, users must be a member of data groups\
        \ to access the data."
      operationId: queryRecords
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Success
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Invalid parameters were given on request
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Search service scale-up is taking longer than expected. Wait
            10 seconds and retry.
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Queries the index for the input request criteria.
      tags:
      - search-api
  /query_with_cursor:
    post:
      description: "The API supports full text search on string fields, range queries\
        \ on date, numeric or string fields, along with geo-spatial search. \nRequired\
        \ roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`\
        \ or `users.datalake.ops`. In addition, users must be a member of data groups\
        \ to access the data. \nIt can be used to retrieve large numbers of results\
        \ (or even all results) from a single search request, in much the same way\
        \ as you would use a cursor on a traditional database."
      operationId: queryWithCursor
      parameters:
      - description: Tenant Id
        in: header
        name: data-partition-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CursorQueryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CursorQueryResponse'
          description: Success
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Invalid parameters were given on request
        '401':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: User not authorized to perform the action
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Internal Server Error
        '502':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Search service scale-up is taking longer than expected. Wait
            10 seconds and retry.
        '503':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
          description: Service Unavailable
      security:
      - Authorization: []
      summary: Queries the index using cursor for the input request criteria.
      tags:
      - search-api
security:
- Authorization: []
servers:
- url: /api/search/v2/
tags:
- description: Service endpoints to search data in datalake
  name: search-api
- description: Health Check API
  name: health-check-api
- description: Version info endpoint
  name: info
